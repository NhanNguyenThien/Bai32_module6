{"ast":null,"code":"import { catchError, map, retry, throwError } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookAPIService {\n  constructor(_http) {\n    this._http = _http;\n  }\n  getBooks() {\n    const headers = new HttpHeaders().set(\"Content-Type\", \"text/plain;charset=utf8\");\n    const requestOptions = {\n      headers: headers,\n      responseType: \"text\"\n    };\n    return this._http.get(\"/books\", requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  getBook(bookId) {\n    const headers = new HttpHeaders().set(\"Content-Type\", \"text/plain;charset=utf-8\");\n    const requestOptions = {\n      headers: headers,\n      responseType: \"text\"\n    };\n    return this._http.get(\"/books/\" + bookId, requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  postBook(aBook) {\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json;charset=utf8\");\n    const requestOptions = {\n      headers: headers,\n      responseType: \"text\"\n    };\n    return this._http.post(\"/books\", JSON.stringify(aBook), requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  putBook(aBook) {\n    const headers = new HttpHeaders().set(\"ContentType\", \"application/json;charset=utf-8\");\n    const requestOptions = {\n      headers: headers,\n      responseType: \"text\"\n    };\n    return this._http.put(\"/books\", JSON.stringify(aBook), requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  deleteBook(bookId) {\n    const headers = new HttpHeaders().set(\"ContentType\", \"application/json;charset=utf-8\");\n    const requestOptions = {\n      headers: headers,\n      responseType: \"text\"\n    };\n    return this._http.delete(\"/books/\" + bookId, requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  handleError(error) {\n    return throwError(() => new Error(error.message));\n  }\n}\nBookAPIService.ɵfac = function BookAPIService_Factory(t) {\n  return new (t || BookAPIService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookAPIService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookAPIService,\n  factory: BookAPIService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","retry","throwError","HttpHeaders","BookAPIService","constructor","_http","getBooks","headers","set","requestOptions","responseType","get","pipe","res","JSON","parse","handleError","getBook","bookId","postBook","aBook","post","stringify","putBook","put","deleteBook","delete","error","Error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/thanhdev/Documents/Project_Angular/baitap_module06/my-app/src/app/services/book-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {catchError, map, Observable, retry, throwError} from \"rxjs\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from \"@angular/common/http\";\nimport {IBook} from \"../models/ibook\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookAPIService {\n\n  constructor(private _http: HttpClient) { }\n\n  getBooks():Observable<any>\n  {\n    const headers=new HttpHeaders().set(\"Content-Type\",\"text/plain;charset=utf8\")\n    const requestOptions:Object={\n      headers:headers,\n      responseType:\"text\"\n    }\n    return this._http.get<any>(\"/books\",requestOptions).pipe(\n        map(res=>JSON.parse(res) as Array<IBook>),\n        retry(3),\n        catchError(this.handleError))\n  }\n  getBook(bookId:string):Observable<any>\n  {\n    const headers=new HttpHeaders().set(\"Content-Type\",\"text/plain;charset=utf-8\")\n    const requestOptions:Object={\n      headers:headers,\n      responseType:\"text\"\n    }\n    return this._http.get<any>(\"/books/\"+bookId,requestOptions).pipe(\n        map(res=>JSON.parse(res) as IBook),\n        retry(3),\n        catchError(this.handleError))\n  }\n  postBook(aBook:any):Observable<any>\n  {\n    const headers=new HttpHeaders().set(\"Content-Type\",\"application/json;charset=utf8\")\n    const requestOptions:Object={\n      headers:headers,\n      responseType:\"text\"\n    }\n    return this._http.post<any>(\"/books\",JSON.stringify(aBook),requestOptions).pipe(\n        map(res=>JSON.parse(res) as Array<IBook>),\n        retry(3),\n        catchError(this.handleError))\n  }\n  putBook(aBook:any):Observable<any>\n  {\n    const headers=new HttpHeaders().set(\"ContentType\",\"application/json;charset=utf-8\")\n    const requestOptions:Object={\n      headers:headers,\n      responseType:\"text\"\n    }\n    return this._http.put<any>(\"/books\",JSON.stringify(aBook),requestOptions).pipe(\n        map(res=>JSON.parse(res) as Array<IBook>),\n        retry(3),\n        catchError(this.handleError))\n  }\n  deleteBook(bookId:string):Observable<any>\n  {\n    const headers=new HttpHeaders().set(\"ContentType\",\"application/json;charset=utf-8\")\n    const requestOptions:Object={\n      headers:headers,\n      responseType:\"text\"\n    }\n    return this._http.delete<any>(\"/books/\"+bookId,requestOptions).pipe(\n        map(res=>JSON.parse(res) as Array<IBook>),\n        retry(3),\n        catchError(this.handleError))\n  }\n  handleError(error:HttpErrorResponse){\n    return throwError(()=>new Error(error.message))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}